[ How to use valgrind's "memcheck" tool ]
valgrind --tool=memcheck <program_name>

[ To see reachable blocks (those to which a pointer was found) are not shown: ]
valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all <program_name>

[ To see where uninitialised values come from: ]
valgrind --tool=memcheck --track-origin=yes <program_name>

[ To see where "invalid write" operation took place: ]
valgrind --tool=memcheck --leak-check=yes <program name>

    ==9814==  Invalid write of size 1
    ==9814==    at 0x804841E: main (example2.c:6)

============================================================
========= Still Reachable issues are not real leak =========
========= It can cause by simply std::cout / printf ========
============================================================
==1639== LEAK SUMMARY:
==1639==    definitely lost: 0 bytes in 0 blocks
==1639==    indirectly lost: 0 bytes in 0 blocks
==1639==      possibly lost: 0 bytes in 0 blocks
==1639==    still reachable: 4,096 bytes in 1 blocks
==1639==         suppressed: 37,815 bytes in 421 blocks
==1639==
==1639== For counts of detected and suppressed errors, rerun with: -v
==1639== Use --track-origins=yes to see where uninitialised values come from
==1639== ERROR SUMMARY: 316 errors from 3 contexts (suppressed: 18 from 18)

============================================================
==================== An optimal report =====================
============================================================
==1601== LEAK SUMMARY:
==1601==    definitely lost: 0 bytes in 0 blocks
==1601==    indirectly lost: 0 bytes in 0 blocks
==1601==      possibly lost: 0 bytes in 0 blocks
==1601==    still reachable: 0 bytes in 0 blocks
==1601==         suppressed: 37,815 bytes in 421 blocks
==1601==
==1601== For counts of detected and suppressed errors, rerun with: -v
==1601== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 18 from 18)
============================================================